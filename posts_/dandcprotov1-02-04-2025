<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Pie Chart Manager</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
    <style>
        * {
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        body {
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .title {
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 8px;
        }
        .subtitle {
            font-size: 16px;
            color: #666;
            text-align: center;
            margin-bottom: 24px;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin: 0 auto 30px auto;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }
        .chart-wrapper {
            width: 100%;
            position: relative;
        }
        .input-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }
        .section-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 16px;
        }
        .input-group {
            margin-bottom: 12px;
        }
        .input-label {
            font-size: 14px;
            margin-bottom: 6px;
            color: #555;
            display: block;
        }
        .input {
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            font-size: 16px;
        }
        .button {
            display: inline-block;
            padding: 12px;
            border-radius: 4px;
            text-align: center;
            margin-top: 8px;
            cursor: pointer;
            font-weight: bold;
            font-size: 16px;
            color: white;
            border: none;
            width: 100%;
        }
        .add-button {
            background-color: #4285F4;
        }
        .add-subtask-button {
            background-color: #34A853;
        }
        .update-button {
            background-color: #FBBC05;
        }
        .task-list-section {
            background-color: #fff;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 32px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }
        .task-list {
            margin-top: 8px;
        }
        .task-item {
            border-bottom: 1px solid #eee;
            padding: 8px 0;
        }
        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            cursor: pointer;
        }
        .task-title-row {
            display: flex;
            align-items: center;
        }
        .color-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
            display: inline-block;
        }
        .task-title {
            font-size: 16px;
            font-weight: 500;
        }
        .task-actions {
            display: flex;
        }
        .action-button {
            padding: 6px 12px;
            border-radius: 4px;
            margin-left: 8px;
            cursor: pointer;
            color: white;
            font-size: 12px;
            font-weight: 500;
            border: none;
        }
        .edit-button {
            background-color: #3498db;
        }
        .delete-button {
            background-color: #e74c3c;
        }
        .small-button {
            padding: 4px 8px;
        }
        .subtask-list {
            margin-left: 20px;
            margin-top: 4px;
            margin-bottom: 8px;
        }
        .subtask-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 4px 0;
        }
        .subtask-title-row {
            display: flex;
            align-items: center;
        }
        .subtask-title {
            font-size: 14px;
        }
        .hidden {
            display: none;
        }
        .selected {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">Task Pie Chart Manager</h1>
        <p class="subtitle">Visualize your tasks and subtasks</p>
        
        <div class="chart-container">
            <div class="chart-wrapper">
                <canvas id="mainChart"></canvas>
            </div>
            <div class="chart-wrapper">
                <canvas id="subtaskChart"></canvas>
            </div>
        </div>
        
        <div class="input-section">
            <h2 class="section-title">Add New Task</h2>
            
            <div class="input-group">
                <label class="input-label" for="taskName">Task Name</label>
                <input class="input" id="taskName" type="text" placeholder="Enter task name">
            </div>
            
            <div class="input-group">
                <label class="input-label" for="taskValue">Task Value</label>
                <input class="input" id="taskValue" type="number" placeholder="Enter task value" min="1">
            </div>
            
            <button class="button add-button" id="addTaskBtn">Add Task</button>
        </div>
        
        <div class="input-section hidden" id="subtaskSection">
            <h2 class="section-title" id="subtaskSectionTitle">Add Subtask</h2>
            
            <div class="input-group">
                <label class="input-label" for="subtaskName">Subtask Name</label>
                <input class="input" id="subtaskName" type="text" placeholder="Enter subtask name">
            </div>
            
            <div class="input-group">
                <label class="input-label" for="subtaskValue">Subtask Value</label>
                <input class="input" id="subtaskValue" type="number" placeholder="Enter subtask value" min="1">
            </div>
            
            <button class="button add-subtask-button" id="addSubtaskBtn">Add Subtask</button>
        </div>
        
        <div class="input-section hidden" id="editSection">
            <h2 class="section-title">Edit Task</h2>
            
            <div class="input-group">
                <label class="input-label" for="editTaskName">Task Name</label>
                <input class="input" id="editTaskName" type="text" placeholder="Enter task name">
            </div>
            
            <div class="input-group">
                <label class="input-label" for="editTaskValue">Task Value</label>
                <input class="input" id="editTaskValue" type="number" placeholder="Enter task value" min="1">
            </div>
            
            <button class="button update-button" id="updateTaskBtn">Update Task</button>
        </div>
        
        <div class="task-list-section">
            <h2 class="section-title">Task List</h2>
            <div class="task-list" id="taskList">
                <!-- Tasks will be dynamically inserted here -->
            </div>
        </div>
    </div>

    <script>
        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Variables
            let tasks = [];
            let selectedTaskId = null;
            let editingTaskId = null;
            let mainChart = null;
            let subtaskChart = null;
            
            // DOM Elements
            const taskNameInput = document.getElementById('taskName');
            const taskValueInput = document.getElementById('taskValue');
            const subtaskNameInput = document.getElementById('subtaskName');
            const subtaskValueInput = document.getElementById('subtaskValue');
            const editTaskNameInput = document.getElementById('editTaskName');
            const editTaskValueInput = document.getElementById('editTaskValue');
            const addTaskBtn = document.getElementById('addTaskBtn');
            const addSubtaskBtn = document.getElementById('addSubtaskBtn');
            const updateTaskBtn = document.getElementById('updateTaskBtn');
            const taskList = document.getElementById('taskList');
            const subtaskSection = document.getElementById('subtaskSection');
            const subtaskSectionTitle = document.getElementById('subtaskSectionTitle');
            const editSection = document.getElementById('editSection');
            
            // Load tasks from localStorage
            function loadTasks() {
                const savedTasks = localStorage.getItem('taskPieChartData');
                if (savedTasks) {
                    tasks = JSON.parse(savedTasks);
                    renderTasks();
                    updateCharts();
                } else {
                    // Initial default data
                    tasks = [
                        { 
                            id: 1, 
                            name: "Work", 
                            color: "#8884d8", 
                            value: 40, 
                            subtasks: [
                                { id: 11, name: "Meetings", value: 15, color: "#a4a1e4" },
                                { id: 12, name: "Coding", value: 25, color: "#6b68c6" }
                            ]
                        },
                        { 
                            id: 2, 
                            name: "Personal", 
                            color: "#82ca9d", 
                            value: 30, 
                            subtasks: [
                                { id: 21, name: "Exercise", value: 10, color: "#a3dab9" },
                                { id: 22, name: "Reading", value: 20, color: "#61ba81" }
                            ]
                        },
                        { 
                            id: 3, 
                            name: "Study", 
                            color: "#ffc658", 
                            value: 30, 
                            subtasks: [
                                { id: 31, name: "Online Course", value: 15, color: "#ffda8b" },
                                { id: 32, name: "Research", value: 15, color: "#ffb225" }
                            ]
                        }
                    ];
                    saveTasks();
                    renderTasks();
                    initCharts();
                }
            }
            
            // Save tasks to localStorage
            function saveTasks() {
                localStorage.setItem('taskPieChartData', JSON.stringify(tasks));
            }
            
            // Generate a random color
            function getRandomColor() {
                const letters = '0123456789ABCDEF';
                let color = '#';
                for (let i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }
            
            // Lighten a color
            function lightenColor(color, amount) {
                // Remove the # if present
                color = color.replace('#', '');
                
                let r = parseInt(color.substring(0, 2), 16);
                let g = parseInt(color.substring(2, 4), 16);
                let b = parseInt(color.substring(4, 6), 16);
                
                r = Math.min(255, r + amount);
                g = Math.min(255, g + amount);
                b = Math.min(255, b + amount);
                
                return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
            }
            
            // Add a new task
            function addTask() {
                const name = taskNameInput.value.trim();
                const value = parseInt(taskValueInput.value);
                
                if (name && value > 0) {
                    const taskId = Date.now();
                    const color = getRandomColor();
                    
                    tasks.push({
                        id: taskId,
                        name: name,
                        value: value,
                        color: color,
                        subtasks: []
                    });
                    
                    // Clear inputs
                    taskNameInput.value = '';
                    taskValueInput.value = '';
                    
                    // Save and render
                    saveTasks();
                    renderTasks();
                    updateCharts();
                }
            }
            
            // Add a subtask
            function addSubtask() {
                const name = subtaskNameInput.value.trim();
                const value = parseInt(subtaskValueInput.value);
                
                if (selectedTaskId && name && value > 0) {
                    const taskIndex = tasks.findIndex(t => t.id === selectedTaskId);
                    
                    if (taskIndex !== -1) {
                        const task = tasks[taskIndex];
                        const currentSubtasksTotal = task.subtasks.reduce((sum, st) => sum + st.value, 0);
                        const newSubtaskValue = Math.min(value, task.value - currentSubtasksTotal);
                        
                        if (newSubtaskValue <= 0) {
                            alert("Cannot add subtask. Task value is already allocated to existing subtasks.");
                            return;
                        }
                        
                        const subtaskId = Date.now();
                        const subtaskColor = lightenColor(task.color, 40);
                        
                        task.subtasks.push({
                            id: subtaskId,
                            name: name,
                            value: newSubtaskValue,
                            color: subtaskColor
                        });
                        
                        // Clear inputs
                        subtaskNameInput.value = '';
                        subtaskValueInput.value = '';
                        
                        // Save and render
                        saveTasks();
                        renderTasks();
                        updateCharts();
                    }
                }
            }
            
            // Delete a task
            function deleteTask(taskId) {
                tasks = tasks.filter(task => task.id !== taskId);
                
                if (selectedTaskId === taskId) {
                    selectedTaskId = null;
                    subtaskSection.classList.add('hidden');
                }
                
                if (editingTaskId === taskId) {
                    editingTaskId = null;
                    editSection.classList.add('hidden');
                }
                
                saveTasks();
                renderTasks();
                updateCharts();
            }
            
            // Delete a subtask
            function deleteSubtask(taskId, subtaskId) {
                const taskIndex = tasks.findIndex(t => t.id === taskId);
                
                if (taskIndex !== -1) {
                    tasks[taskIndex].subtasks = tasks[taskIndex].subtasks.filter(st => st.id !== subtaskId);
                    
                    saveTasks();
                    renderTasks();
                    updateCharts();
                }
            }
            
            // Start editing a task
            function startEditTask(taskId) {
                const task = tasks.find(t => t.id === taskId);
                
                if (task) {
                    editingTaskId = taskId;
                    editTaskNameInput.value = task.name;
                    editTaskValueInput.value = task.value;
                    editSection.classList.remove('hidden');
                }
            }
            
            // Update a task
            function updateTask() {
                if (editingTaskId) {
                    const taskIndex = tasks.findIndex(t => t.id === editingTaskId);
                    
                    if (taskIndex !== -1) {
                        const name = editTaskNameInput.value.trim();
                        let value = parseInt(editTaskValueInput.value);
                        
                        if (name && value > 0) {
                            const task = tasks[taskIndex];
                            const subtasksTotal = task.subtasks.reduce((sum, st) => sum + st.value, 0);
                            
                            // Ensure task value is not smaller than sum of subtasks
                            value = Math.max(value, subtasksTotal);
                            
                            tasks[taskIndex].name = name;
                            tasks[taskIndex].value = value;
                            
                            // Clear editing state
                            editingTaskId = null;
                            editSection.classList.add('hidden');
                            
                            // Save and render
                            saveTasks();
                            renderTasks();
                            updateCharts();
                        }
                    }
                }
            }
            
            // Select a task (for adding subtasks)
            function selectTask(taskId) {
                // Deselect previous task if any
                document.querySelectorAll('.task-item').forEach(item => {
                    item.classList.remove('selected');
                });
                
                // Select the new task
                selectedTaskId = taskId;
                
                if (selectedTaskId) {
                    const task = tasks.find(t => t.id === selectedTaskId);
                    const taskElement = document.querySelector(`.task-item[data-id="${selectedTaskId}"]`);
                    
                    if (task && taskElement) {
                        taskElement.classList.add('selected');
                        subtaskSectionTitle.textContent = `Add Subtask to ${task.name}`;
                        subtaskSection.classList.remove('hidden');
                        updateCharts();
                    }
                } else {
                    subtaskSection.classList.add('hidden');
                    if (subtaskChart) {
                        subtaskChart.destroy();
                        subtaskChart = null;
                    }
                }
            }
            
            // Render the task list
            function renderTasks() {
                taskList.innerHTML = '';
                
                tasks.forEach(task => {
                    const taskItem = document.createElement('div');
                    taskItem.className = 'task-item';
                    taskItem.dataset.id = task.id;
                    
                    if (task.id === selectedTaskId) {
                        taskItem.classList.add('selected');
                    }
                    
                    const taskHeader = document.createElement('div');
                    taskHeader.className = 'task-header';
                    taskHeader.addEventListener('click', () => selectTask(task.id));
                    
                    // Task title row
                    const taskTitleRow = document.createElement('div');
                    taskTitleRow.className = 'task-title-row';
                    
                    const colorIndicator = document.createElement('span');
                    colorIndicator.className = 'color-indicator';
                    colorIndicator.style.backgroundColor = task.color;
                    
                    const taskTitle = document.createElement('span');
                    taskTitle.className = 'task-title';
                    taskTitle.textContent = `${task.name} (${task.value})`;
                    
                    taskTitleRow.appendChild(colorIndicator);
                    taskTitleRow.appendChild(taskTitle);
                    
                    // Task actions
                    const taskActions = document.createElement('div');
                    taskActions.className = 'task-actions';
                    
                    const editButton = document.createElement('button');
                    editButton.className = 'action-button edit-button';
                    editButton.textContent = 'Edit';
                    editButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        startEditTask(task.id);
                    });
                    
                    const deleteButton = document.createElement('button');
                    deleteButton.className = 'action-button delete-button';
                    deleteButton.textContent = 'Delete';
                    deleteButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        deleteTask(task.id);
                    });
                    
                    taskActions.appendChild(editButton);
                    taskActions.appendChild(deleteButton);
                    
                    // Add to task header
                    taskHeader.appendChild(taskTitleRow);
                    taskHeader.appendChild(taskActions);
                    
                    // Add task header to task item
                    taskItem.appendChild(taskHeader);
                    
                    // Subtasks
                    if (task.subtasks.length > 0) {
                        const subtaskList = document.createElement('div');
                        subtaskList.className = 'subtask-list';
                        
                        task.subtasks.forEach(subtask => {
                            const subtaskItem = document.createElement('div');
                            subtaskItem.className = 'subtask-item';
                            
                            const subtaskTitleRow = document.createElement('div');
                            subtaskTitleRow.className = 'subtask-title-row';
                            
                            const subtaskColorIndicator = document.createElement('span');
                            subtaskColorIndicator.className = 'color-indicator';
                            subtaskColorIndicator.style.backgroundColor = subtask.color;
                            
                            const subtaskTitle = document.createElement('span');
                            subtaskTitle.className = 'subtask-title';
                            subtaskTitle.textContent = `${subtask.name} (${subtask.value})`;
                            
                            subtaskTitleRow.appendChild(subtaskColorIndicator);
                            subtaskTitleRow.appendChild(subtaskTitle);
                            
                            const subtaskDeleteButton = document.createElement('button');
                            subtaskDeleteButton.className = 'action-button delete-button small-button';
                            subtaskDeleteButton.textContent = 'Delete';
                            subtaskDeleteButton.addEventListener('click', () => {
                                deleteSubtask(task.id, subtask.id);
                            });
                            
                            subtaskItem.appendChild(subtaskTitleRow);
                            subtaskItem.appendChild(subtaskDeleteButton);
                            
                            subtaskList.appendChild(subtaskItem);
                        });
                        
                        taskItem.appendChild(subtaskList);
                    }
                    
                    taskList.appendChild(taskItem);
                });
            }
            
            // Initialize charts
            function initCharts() {
                const mainCtx = document.getElementById('mainChart').getContext('2d');
                const subtaskCtx = document.getElementById('subtaskChart').getContext('2d');
                
                // Main chart
                mainChart = new Chart(mainCtx, {
                    type: 'pie',
                    data: {
                        labels: tasks.map(task => task.name),
                        datasets: [{
                            data: tasks.map(task => task.value),
                            backgroundColor: tasks.map(task => task.color),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            },
                            title: {
                                display: true,
                                text: 'Task Distribution'
                            }
                        }
                    }
                });
            }
            
            // Update charts with current data
            function updateCharts() {
                // Update main chart
                if (mainChart) {
                    mainChart.data.labels = tasks.map(task => task.name);
                    mainChart.data.datasets[0].data = tasks.map(task => task.value);
                    mainChart.data.datasets[0].backgroundColor = tasks.map(task => task.color);
                    mainChart.update();
                } else {
                    initCharts();
                }
                
                // Update subtask chart if a task is selected
                if (selectedTaskId) {
                    const selectedTask = tasks.find(t => t.id === selectedTaskId);
                    
                    if (selectedTask && selectedTask.subtasks.length > 0) {
                        if (subtaskChart) {
                            subtaskChart.data.labels = selectedTask.subtasks.map(st => st.name);
                            subtaskChart.data.datasets[0].data = selectedTask.subtasks.map(st => st.value);
                            subtaskChart.data.datasets[0].backgroundColor = selectedTask.subtasks.map(st => st.color);
                            subtaskChart.options.plugins.title.text = `Subtasks for ${selectedTask.name}`;
                            subtaskChart.update();
                        } else {
                            const subtaskCtx = document.getElementById('subtaskChart').getContext('2d');
                            subtaskChart = new Chart(subtaskCtx, {
                                type: 'pie',
                                data: {
                                    labels: selectedTask.subtasks.map(st => st.name),
                                    datasets: [{
                                        data: selectedTask.subtasks.map(st => st.value),
                                        backgroundColor: selectedTask.subtasks.map(st => st.color),
                                        borderWidth: 1
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    plugins: {
                                        legend: {
                                            position: 'bottom'
                                        },
                                        title: {
                                            display: true,
                                            text: `Subtasks for ${selectedTask.name}`
                                        }
                                    }
                                }
                            });
                        }
                    } else if (subtaskChart) {
                        subtaskChart.destroy();
                        subtaskChart = null;
                    }
                } else if (subtaskChart) {
                    subtaskChart.destroy();
                    subtaskChart = null;
                }
            }
            
            // Event listeners
            addTaskBtn.addEventListener('click', addTask);
            addSubtaskBtn.addEventListener('click', addSubtask);
            updateTaskBtn.addEventListener('click', updateTask);
            
            // Initialize app
            loadTasks();
        });
    </script>
</body>
</html>
